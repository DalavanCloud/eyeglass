"use strict";

var fs = require("fs");
var path = require("path");
var discover = require("./util/discover");

// XXX TODO Refactor copy & pasted methods to share with the module importer.

// Returns whether a file exists.
function existsSync(file) {
  // This fs method is going to be deprecated
  // but can be re-implemented with fs.accessSync later.
  return fs.existsSync(file);
}


function packageRootDir(dir) {
  if (existsSync(path.join(dir, "package.json"))) {
    return dir;
  } else {
    var parentDir = path.resolve(dir, "..");
    if (parentDir !== dir) {
      return packageRootDir(parentDir);
    }
  }
}

function makeImporter(eyeglass, sass, options, fallbackImporter) {
  var importedAssets = {};
  var root = options.root;
  var allModulesCache = {};


  function getModuleByName(moduleName, dir) {
    var allModules = allModulesCache[dir];
    if (!allModules) {
      allModules = discover.all(dir, true, dir === root).modules;
      allModulesCache[dir] = allModules;
    }

    for (var i = 0; i < allModules.length; i++) {
      var mod = allModules[i];
      if (moduleName === mod.eyeglassName) {
        return mod.main;
      }
    }
  }

  // If fallbackImporter is provided and it handles the import
  // then the done callback is invoked with its result.
  // if there is no fallbackImporter or it decides to not handle
  // the import, then the noFallback callback is invoked with no arguments.
  function fallback(uri, prev, done, noFallback) {
    if (fallbackImporter) {
      fallbackImporter(uri, prev, function(result) {
        if (result === sass.NULL || !result) {
          noFallback();
        } else {
          done(result);
        }
      });
    } else {
      noFallback();
    }
  }

  function importOnce(data, enabled, done) {
    if (enabled && importedAssets[data.file]) {
      done({contents: "", file: "already-imported:" + data.file});
    } else {
      importedAssets[data.file] = true;
      done(data);
    }
  }

  return function(uri, prev, done) {
    var isRealFile = existsSync(prev);
    var pkgRootDir;

    function importAppAssets() {
      importOnce({
        contents: eyeglass.assets.asAssetImport(),
        file: "autoGenerated:assets"
      }, eyeglass.enableImportOnce, done);
    }


    if (uri === "assets") {
      if (isRealFile) {
        pkgRootDir = packageRootDir(path.dirname(prev));
        if (pkgRootDir && pkgRootDir !== root) {
          var egModDef = discover.getEyeglassModuleDef(pkgRootDir);
          var eyeglassExports = require(egModDef.main)(eyeglass, sass);
          if (eyeglassExports.assets) {
            importOnce({
              contents: eyeglassExports.assets.asAssetImport(egModDef.eyeglassName),
              file: "autoGenerated:" + egModDef.eyeglassName + "/assets"
            }, eyeglass.enableImportOnce, done);
          } else {
            done(new Error("No assets specified for plugin " + egModDef.eyeglassName));
          }
        } else {
          // not using npm, huh? I guess you want the main app's assets
          importAppAssets();
        }
      } else {
        // main app's assets
        importAppAssets();
      }
      return;
    }

    var fragments = uri.split("/");
    var moduleName = fragments[0];
    var relativePath = fragments.slice(1).join("/");

    if (relativePath !== "assets") {
      fallback(uri, prev, done, function() {
        done(sass.NULL);
      });
      return;
    }

    pkgRootDir = isRealFile ? packageRootDir(path.dirname(prev)) : root;
    var jsFile = getModuleByName(moduleName, pkgRootDir);

    if (jsFile) {
      var mod = require(jsFile)(eyeglass, sass);
      if (mod.assets) {
        importOnce({
          contents: mod.assets.asAssetImport(moduleName),
          file: "autoGenerated:" + moduleName + "/assets"
        }, eyeglass.enableImportOnce, done);
      } else {
        done(new Error("No assets specified for eyeglass plugin " + moduleName));
      }
    } else {
      done(new Error("No eyeglass plugin named: " + moduleName));
    }
  };
}

module.exports = makeImporter;
